workspace: "uri:http://ultrastructure.me/ontology/com.chiralbehaviors/demo/northwind/v1" 
           "Northwind" 
           "Ultrstructure implementation of ye olde thyme Northwind demo"
imports {
    "urn:uuid:00000000-0000-0004-0000-000000000003" as kernel
}

agencies {
    BillingComputer = "Billing CPU" "Billing computer";
    CPU = "CPU" "General purpose computer";
    CreditDept = "Credit Department" "The credit department";
    ExternalCust = "External Customer" "External (paying) customer";
    Factory1Agency = "Factory 1" "Factory #1";
    GeorgetownUniversity = "GU" "Georgetown University";
    CafleurBon = "carfleurBon" "Carfleur Bon";
    Manufacturer = "MNFR" "Manufacturer";
    NonExemptAgency = "Non Exempt" "Non tax exempt";
    OrgA = "OrgA" "Organization A";
    OrderFullfillment = "Order Fullfillment" "Order Fullfillment";
    
    Exempt = "Exempt" "Exempt from sales tax";
    Northwind = "Northwind" "Northwind, inc";
    Company = "Company" "A company";
    Customer = "Northwind Customer" "A customer of Northwind";
    Employee = "Northwind Employee" "An employee of Northwind";
    Manager = "Northwind Manager" "An manager of Northwind";
    Shipper = "Shipper" "An agency that ships products";
    Supplier = "Supplier" "An agency that supplies products";
    
    edges {
        Northwind.kernel::IsA.Company
        Shipper.kernel::IsA.Company
        Supplier.kernel::IsA.Company
        GeorgetownUniversity.CustomerType.ExternalCust
        GeorgetownUniversity.SalesTaxStatus.Exempt
        OrgA.CustomerType.ExternalCust
        CafleurBon.CustomerType.ExternalCust
        OrgA.SalesTaxStatus.NonExemptAgency
        Manager.kernel::IsA.Employee
    }
    facets {
        kernel::IsA.Employee { LastName FirstName Title TitleOfCourtesy BirthDate HireDate }
            constraints {
                1 EmployeeOf: kernel::IsA.Company 
                1 ReportsTo: kernel::IsA.Manager
                3 HasTerritory: kernel::IsA.Territory
            }
        kernel::IsA.Customer
            constraints {
                1 ContactFor: kernel::IsA.Employee
            }
        kernel::IsA.Company
            constraints {
                1 ContactFor: kernel::IsA.Employee
            }
        kernel::IsA.Supplier
            constraints {
                1 ContactOf: kernel::IsA.Employee 
                3 Region: kernel::IsA.RegionServed
            }
        kernel::IsA.Shipper
            constraints {
                1 ContactOf: kernel::IsA.Employee 
                3 Region: kernel::IsA.RegionServed
            }
        kernel::IsA.Manager
    }
}

attributes {
    LastName = "Last Name" "the last name" text;
    FirstName = "First Name" "the first name" text;
    Title = "Title" "Official title" text;
    TitleOfCourtesy = "Title of Courtesy" "Informal title" text;
    BirthDate = "Birthdate" "Birthdate" timestamp;
    HireDate = "Hire Date" "Hire date" timestamp;
    
    StreetNumber = "Street Number" "The number on a street" text;
    PostalCode = "Postal Code" "The postal routing code" text;
    
    OrderDate = "Order Date" "Date of order" timestamp;
    RequiredDate = "Required Date" "Date required" timestamp;
    ShipDate = "Ship Date" "Date shipped" timestamp;
    
    DiscountPercentage = "discount" "discount percentage" numeric;
    Quantity = "quantity" "quantity ordered" int; 
    UnitPrice = "unit price"  "unit price" numeric; 
    TaxRate = "tax rate" "tax rate" numeric;
    
    Picture = "picture" "A digital picture" binary;
}

locations {
    Territory = "Territory" "The territory";
    RegionServed = "Region Service" "The regional group served";
    DC = "DC" "District of Columbia";
    EastCoast = "East Coast" "East Coast";
    WestCoast = "West Coast" "The Left Coast";
    France = "France" "The country of France";
    Paris = "Paris" "The city Paris";
    US = "United States" "US locations";
    Euro = "Europe" "EU locations";
    
    ShippingAddress = "The association with a shipping address" "An aspect for referring to a physical address that we can Ship to";
    SourceAddress = "The association with a source address" "An aspect for referring to a physical address that we Ship from";
    
    Rsb225 = "225RSB" "225 Reiss Science Bldg";
    Bht37 = "37BHT" "37 Bret Harte Terrace";
    Rc31 = "31rc" "31 Rue Cambon"; 
    Factory1 = "Factory 1" "Factory #1";
    Bin1 = "Bin 1";
    Bin15 = "Bin 15";
    edges {
        Bin1.Area.Factory1
        Bin15.Area.Factory1
        Rsb225.City.DC
        Bht37.City.DC
        Rc31.City.Paris
        DC.Region.EastCoast
        EastCoast.Area.US
        Paris.Region.France
        France.Area.Euro
        Factory1.Street.Bht37
    }
    
    facets {
        kernel::IsA.Territory
        kernel::IsA.RegionServed
        
        kernel::IsA.City
        kernel::IsA.Country
        kernel::IsA.Region
        kernel::IsA.StateOrProvinces
        kernel::IsA.Street
    }
}

products {
    Category = "Product Category" "A category of products";
    PricedProduct = "Priced Product" "A product we sell";
    Abc486 = "Abc486" "Laptop computer";
    Frozen = "frozen" "Frozen Products";
    ChemB = "ChemB" "Chemical B";
    RoomTemp = "RoomTemp" "Room temperature products";
    NonExempt = "NonExempt" "Non tax exempt products";
    Deliver = "Deliver" "Deliver product";
    Pick = "Pick" "Pick inventory";
    Ship = "Ship" "Ship inventory";
    CheckCredit = "CheckCredit" "Check customer in-house credit";
    CheckLetterOfCredit = "CheckLetterOfCredit" "Check customer letter of credit";
    Discount = "Discount" "Compute Fee Discount";
    Fee = "Fee" "Compute Fee";
    PrintCustomsDeclaration = "PrintCustomsDeclaration" "Print the customs declaration";
    PrintPurchaseOrder = "PrintPurchaseOrder" "Print the purchase order";
    SalesTax = "SalesTax" "Compute sales tax";
    Order = "Order" "An Order";
    ItemDetail = "Order Item Detail" "Detail on item";
    
    edges {
        Abc486.StorageType.RoomTemp
        Abc486.SalesTaxStatus.NonExempt
        ChemB.StorageType.Frozen
    }
    facets {
        kernel::IsA.PricedProduct { UnitPrice }
            constraints {
                3 IsCategorizedAs: kernel::IsA.Category
            }
        kernel::IsA.ItemDetail { UnitPrice Quantity DiscountPercentage TaxRate }
            constraints {
                1 OrderedProductOf: kernel::IsA.PricedProduct
                1 ItemDetailOf: kernel::IsA.Order
            }
        kernel::IsA.Order { RequiredDate OrderDate ShipDate }
            constraints {
                3 HasItemDetail: kernel::IsA.ItemDetail
            }
        kernel::IsA.Category { Picture }
    }
}

relationships {
    Area = "Area" "A is a member of the economic community B" | AreaOf = "Area Of" "A is economic community of B";
    Country = "Country" "A is located in the country B" | countryOf = "Country Of" "A is the country of B";
    Region = "Region" "The general region of A is B" | RegionOf = "Region Of" "A is the general region of B";
    HasTerritory = "Territory" "A has territory B" | TerritoryOf = "Territory Of" "A is a territory of B";
    State = "State" "A is located in the State B" | StateOf = "State Of" "A is the State of B";
    City = "City" "A is located in the City B" | CityOf = "City Of" "A is the city of B";
    Street = "Street" "A is located on the Street B" | StreetOf = "Street Of" "A is the street of B";
    
    CustomerType = "Customer Type" "A has customer type of B" | CustomerTypeOf = "Customer Type Of" "A is the customer type of B";
    SalesTaxStatus = "Sales Tax Status" "The sales tax status of A is B" | SalesTaxStatusOf = "Sales Tax Status Of" "A is the sales tax status of B";
    
    StorageType = "StorageType" "The type of storage required for A is B" | StorageTypeOf = "StorageType Of" "A is the storage type of B";
    PhysicalAddress = "Physical Address" "the phyiscal address of A is B" | PhysicalAddressOf ="Physical Address Of" "A is the physical address of B";
   
    ReportsTo = "Reports To" "A reports to B" | HasReport = "Has Report" "A has report B";
    EmployeeOf = "Employee Of" "A is an employee of B" | HasEmployee = "Has Employee" "A has employee B";
    SupplierOf = "Supplier Of" "A is a supplier of B" | HasSupplier = "Has Supplier" "A has supplier B";
    Ships = "Ships" "A ships B" | HasShipper = "Has Shipper" "A has shipper B";
    ContactOf = "Contact Of" "A is the contact for B" | ContactFor = "A is the contact for B";
    
    ShippedBy = "Shipped By" "A was shipped by B" | Shipped = "Shipped" "A shipped B";
    DeliveredTo = "Delivered To" "A was delivered to B" | Recieved = "Received" "A recieved B";
    OrderedBy = "Ordered By" "A was ordered by B" | Ordered = "Ordered" "A ordered B";
    
    ItemDetailOf = "Item Detail Of" "A is an item detail of B" | HasItemDetail = "Has Item Detail" "A has item detail B";
    OrderedProductOf = "Ordered Product Of" "A is the ordered product of B" | ProductOrdered = "Product Ordered" "A is a product order of B";
    IsCategorizedAs = "Is Categorized As" "A is categorized as B"  | CategoryOf = "A is a category of B";
}


status codes {
    Available = "Available"  "Job is Available for processing";
    Active = "Active" "Working on it now";
    WaitingOnCreditCheck = "Waiting on Credit Check" "Waiting on credit check to be Completed";
    Completed = "Completed" "Completed job";
    Failure = "Failure" "Something went pear shaped";
    PickCompleted = "Pick Completed" "Pick product has been Completed";
    WaitingOnPurchaseOrder = "Waiting on the purchace order" "Waiting for the purchase order to be complete";
    WaitingOnPricing = "Waiting on pricing" "Waiting for pricing to be Completed";
    WaitingOnFee = "Waiting on Fee calculation" "Waiting for Fee calculation to be Completed";
    Abandoned = "Job abandoned"  "We were going to do it, something happened in earlier processing that will prevent US from proceeding";
}
status code sequencings {
    Pick: {
           WaitingOnCreditCheck Available
           Available Active 
           Active Completed
    }
    Ship: {
        WaitingOnPurchaseOrder Available 
        Available Active 
        Active Completed
    }
    Deliver: {
        Available Active
        Active Completed
    }
    CheckCredit: {
        Available Active
        Active Completed
    }
    CheckLetterOfCredit: {
        Available Active
        Active Completed
    }
    Discount: {
        Available Active
        Active Completed
    }
    Fee: {
        Available Active
        Active Completed
    }
    PrintCustomsDeclaration: {
        WaitingOnFee Available
        Available Active
        Active Completed
    }
    PrintPurchaseOrder: {
        WaitingOnFee Available
        Available Active
        Active Completed
    }
    SalesTax: {
        Available Active
        Active Completed
    }
}

sequencing auths {
    parent {
        
        service: CheckCredit
        status: Completed
        parent: Pick
        next: Available
        
        service: CheckLetterOfCredit
        status: Completed
        parent: Pick
        next: Available
        
        service: PrintCustomsDeclaration
        status: Completed
        parent: Ship
        next: Available
        activeSiblings: false
        
        service: PrintPurchaseOrder
        status: Completed
        parent: Ship
        next: Available
        activeSiblings: false
        
        service: Discount
        status: Completed
        parent: Fee
        next: Available
        activeSiblings: false
        
        service: SalesTax
        status: Completed
        parent: Fee
        next: Available
        activeSiblings: false
        
        service: Ship
        status: Completed
        parent: Deliver
        next: Completed
        activeSiblings: false
        
        service: Fee
        status: Completed
        parent: PrintPurchaseOrder
        next: Available
        activeSiblings: false
    }
    sibling {
        parent: Pick
        status: Completed
        sibling: Ship
        next: WaitingOnPurchaseOrder
        
        parent: PrintPurchaseOrder
        status: Completed
        sibling: PrintCustomsDeclaration
        next: Available
    }
    child {
        parent: Ship
        status: WaitingOnPurchaseOrder
        child: PrintPurchaseOrder
        next: WaitingOnFee
        
        parent: Pick
        status: WaitingOnCreditCheck
        child: CheckCredit
        next: Available
        
        parent: PrintPurchaseOrder
        status: WaitingOnFee
        child: Fee
        next: Available
        
        parent: Deliver
        status: Available
        child: Pick
        next: WaitingOnCreditCheck
        
        parent: Fee
        status: Available
        child: SalesTax
        next: Available
        
        parent: Fee
        status: Available
        child: Discount
        next: Available
    }
}
inferences {
    AreaOf.RegionOf.AreaOf
    AreaOf.StateOf.AreaOf
    AreaOf.CityOf.AreaOf
    AreaOf.StreetOf.AreaOf
    RegionOf.StateOf.RegionOf
    RegionOf.CityOf.RegionOf
    RegionOf.StreetOf.RegionOf
    StateOf.CityOf.StateOf
    StateOf.StreetOf.StateOf
    CityOf.StreetOf.CityOf
    ReportsTo.ReportsTo.ReportsTo
}
protocols {
        service: Deliver product: kernel::AnyProduct from: kernel::AnyLocation to: kernel::AnyLocation
        ->
        service: Pick product: kernel::SameProduct assign: Factory1Agency
        
        service: Pick product: kernel::AnyProduct from: US to: US
        ->
        service: CheckCredit product: kernel::SameProduct assign: CPU
        
        service: Pick product: kernel::AnyProduct from: US to: Euro
        ->
        service: CheckLetterOfCredit product: kernel::SameProduct assign: CreditDept
        
        service: Deliver product: kernel::AnyProduct from: kernel::AnyLocation to: kernel::AnyLocation 
            requester: kernel::AnyAgency
        ->
        service: Ship product: kernel::SameProduct assign: Factory1Agency
        
        service: Ship product: Abc486 from: US to: Euro
        ->
        service: PrintCustomsDeclaration product: kernel::SameProduct assign: CPU
        
        service: Ship product: Abc486 from: US to: kernel::AnyLocation
        ->
        service: PrintPurchaseOrder product: kernel::SameProduct assign: CPU 
        
        service: PrintPurchaseOrder product: Abc486 from: US to: kernel::AnyLocation requester: kernel::AnyAgency
        -> 
        service: Fee product: kernel::SameProduct assign: BillingComputer
        
        service: Fee product: NonExempt from: kernel::AnyLocation to: DC requester: NonExemptAgency 
        ->
        service: SalesTax product: kernel::SameProduct assign: BillingComputer
        
        service: Fee product: Abc486 from: US to: Euro requester: ExternalCust
        ->
        service: Discount product: kernel::SameProduct assign: BillingComputer
        
        service: Fee product: Abc486 from: US to: DC requester: GeorgetownUniversity
        ->
        service: SalesTax product: kernel::SameProduct assign: BillingComputer
}
meta protocols {
        transform: Deliver
        product: kernel::AnyRelationship
        from: Area
        to: State
        
        transform: Pick
        product: kernel::AnyRelationship
        from: Area
        to: Area 
        requester: CustomerType
        
        transform: Ship
        product: kernel::AnyRelationship
        from: Area
        to: Area 
        requester: CustomerType
        
        transform: Fee
        product: kernel::AnyRelationship
        to: City
        requester: SalesTaxStatus 
        
        transform: PrintPurchaseOrder
        product: kernel::AnyRelationship
        from: Area
        to: kernel::AnyRelationship
        requester: kernel::AnyRelationship
}