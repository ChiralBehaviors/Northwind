workspace: "uri:http://ultrastructure.me/ontology/com.chiralbehaviors/demo/northwind/v1" 
           "Northwind" 
           "Ultrstructure implementation of ye olde thyme Northwind demo"
imports {
    "urn:uuid:00000000-0000-0004-0000-000000000003" as kernel
}

agencies {
    NonExemptAgency = "Non Exempt" "Non tax exempt";
    ExternalCust = "External Customer" "External (paying) customer";
    InternalCust = "Internal Customer" "Internal (non paying) customer";
    AbstractCustomerType = "Customer Type" "Common super typeof customer's type";
    ExemptAgency = "Exempt" "Exempt from sales tax";
    Company = "Company" "A company";
    Customer = "Northwind Customer" "A customer of Northwind";
    Employee = "Northwind Employee" "An employee of Northwind";
    Manager = "Northwind Manager" "An manager of Northwind";
    Shipper = "Shipper" "An agency that ships products";
    Supplier = "Supplier" "An agency that supplies products";
    AgencyTaxStatus = "Tax Status" "The abstract tax status of an agency";
    
    edges {
        ExternalCust.kernel::IsA.AbstractCustomerType
        InternalCust.kernel::IsA.AbstractCustomerType
        ExemptAgency.kernel::IsA.AgencyTaxStatus
        NonExemptAgency.kernel::IsA.AgencyTaxStatus
        Shipper.kernel::IsA.Company
        Supplier.kernel::IsA.Company
        Manager.kernel::IsA.Employee
    }
    facets {
        kernel::IsA.Employee { LastName FirstName Title TitleOfCourtesy BirthDate HireDate }
            constraints {
                one EmployeeOf: kernel::IsA.Company 
                one ReportsTo: kernel::IsA.Manager
                n HasTerritory: kernel::IsA.Territory
            }
        kernel::IsA.Customer
            constraints {
                one CustomerType method: relationship : kernel::IsA.AbstractCustomerType
                one SalesTaxStatus method: relationship : kernel::IsA.AgencyTaxStatus
            }
        kernel::IsA.Company
            constraints {
                one Contact method: relationship : kernel::IsA.Employee
                one SalesTaxStatus method: relationship : kernel::IsA.AgencyTaxStatus
            }
        kernel::IsA.Supplier
            constraints {
                n InRegion: kernel::IsA.Region
            }
        kernel::IsA.Shipper
            constraints { 
                n InRegion: kernel::IsA.Region
            }
        kernel::IsA.Manager
        kernel::IsA.AgencyTaxStatus
        kernel::IsA.AbstractCustomerType
    }
}

attributes {
    LastName = "Last Name" "the last name" text;
    FirstName = "First Name" "the first name" text;
    Title = "Title" "Official title" text;
    TitleOfCourtesy = "Title of Courtesy" "Informal title" text;
    BirthDate = "Birthdate" "Birthdate" timestamp;
    HireDate = "Hire Date" "Hire date" timestamp;
    
    StreetNumber = "Street Number" "The number on a street" text;
    PostalCode = "Postal Code" "The postal routing code" text;
    
    OrderDate = "Order Date" "Date of order" timestamp;
    RequiredDate = "Required Date" "Date required" timestamp;
    ShipDate = "Ship Date" "Date shipped" timestamp;
    
    DiscountPercentage = "discount" "discount percentage" numeric;
    Quantity = "quantity" "quantity" int; 
    UnitPrice = "unit price"  "unit price" numeric; 
    TaxRate = "tax rate" "tax rate" numeric;
    
    Picture = "picture" "A digital picture" binary;
}

locations {
    Region = "Region" "A Region";
    Area = "Area" "An Area";
    StateOrProvince = "State or Province" "A state or province";
    City = "City" "A City";
    Country = "Country" "A Country";
    Street = "Street" "A Street";
    Territory = "Territory" "A territory";
    StockLocation = "Stock Location" "The location of product";
    
    facets {
        kernel::IsA.Region
        kernel::IsA.Area
        kernel::IsA.StateOrProvince
        kernel::IsA.City
        kernel::IsA.Country
        kernel::IsA.Street
        kernel::IsA.Territory
        kernel::IsA.StockLocation
    }
}

products { 
    Category = "Product Category" "A category of products";
    PricedProduct = "Priced Product" "A product we sell";
    RoomTemp = "RoomTemp" "Room temperature products";
    Frozen = "frozen" "Frozen Products";
    ExemptProduct = "Exempt" "Tax exempt products";
    NonExemptProduct = "NonExempt" "Non tax exempt products";
    Order = "Order" "An Order";
    ItemDetail = "Order Item Detail" "Detail on item";
    StockedProduct = "Stocked Product" "A product stocked at a location";
    
    Deliver = "Deliver" "Deliver product";
    Pick = "Pick" "Pick inventory";
    Ship = "Ship" "Ship inventory";
    CheckCredit = "CheckCredit" "Check customer in-house credit";
    CheckLetterOfCredit = "CheckLetterOfCredit" "Check customer letter of credit";
    Discount = "Discount" "Compute Fee Discount";
    Fee = "Fee" "Compute Fee";
    PrintCustomsDeclaration = "PrintCustomsDeclaration" "Print the customs declaration";
    PrintPurchaseOrder = "PrintPurchaseOrder" "Print the purchase order";
    SalesTax = "SalesTax" "Compute sales tax";
    ProductTaxStatus = "Tax Status" "Product tax status";
    
    edges {
        ExemptProduct.kernel::IsA.ProductTaxStatus
        NonExemptProduct.kernel::IsA.ProductTaxStatus
    }
    facets {
        kernel::IsA.PricedProduct { UnitPrice }
            constraints {
                n IsCategorizedAs: kernel::IsA.Category
                one SalesTaxStatus method: relationship : kernel::IsA.ProductTaxStatus
            }
        kernel::IsA.ItemDetail { UnitPrice Quantity DiscountPercentage TaxRate }
            constraints {
                one OrderedProductOf: kernel::IsA.PricedProduct
                one ItemDetailOf: kernel::IsA.Order
            }
        kernel::IsA.Order { RequiredDate OrderDate ShipDate }
            constraints {
                n HasItemDetail: kernel::IsA.ItemDetail
            }
        kernel::IsA.Category { Picture }
        kernel::IsA.Frozen
        kernel::IsA.RoomTemp
        kernel::IsA.ProductTaxStatus
        kernel::IsA.StockedProduct
            constraints {
                one StockedAt: kernel::IsA.StockLocation
                { Quantity }
            }
    }
}

relationships {
    InArea = "Area" "A is a member of the economic community B" | AreaOf = "Area Of" "A is economic community of B";
    InCountry = "Country" "A is located in the country B" | countryOf = "Country Of" "A is the country of B";
    InRegion = "Region" "The general region of A is B" | RegionOf = "Region Of" "A is the general region of B";
    HasTerritory = "Territory" "A has territory B" | TerritoryOf = "Territory Of" "A is a territory of B";
    InState = "State" "A is located in the State B" | StateOf = "State Of" "A is the State of B";
    InCity = "City" "A is located in the City B" | CityOf = "City Of" "A is the city of B";
    OnStreet = "Street" "A is located on the Street B" | StreetOf = "Street Of" "A is the street of B";
    
    CustomerType = "Customer Type" "A has customer type of B" | CustomerTypeOf = "Customer Type Of" "A is the customer type of B";
    SalesTaxStatus = "Sales Tax Status" "The sales tax status of A is B" | SalesTaxStatusOf = "Sales Tax Status Of" "A is the sales tax status of B";
    
    StorageType = "StorageType" "The type of storage required for A is B" | StorageTypeOf = "StorageType Of" "A is the storage type of B";
    PhysicalAddress = "Physical Address" "the phyiscal address of A is B" | PhysicalAddressOf ="Physical Address Of" "A is the physical address of B";
   
    ReportsTo = "Reports To" "A reports to B" | HasReport = "Has Report" "A has report B";
    EmployeeOf = "Employee Of" "A is an employee of B" | HasEmployee = "Has Employee" "A has employee B";
    SupplierOf = "Supplier Of" "A is a supplier of B" | HasSupplier = "Has Supplier" "A has supplier B";
    Ships = "Ships" "A ships B" | HasShipper = "Has Shipper" "A has shipper B";
    ContactOf = "Contact Of" "A is the contact of B" | Contact = " the contact of A is B";
    
    ShippedBy = "Shipped By" "A was shipped by B" | Shipped = "Shipped" "A shipped B";
    DeliveredTo = "Delivered To" "A was delivered to B" | Recieved = "Received" "A recieved B";
    OrderedBy = "Ordered By" "A was ordered by B" | Ordered = "Ordered" "A ordered B";
    
    ItemDetailOf = "Item Detail Of" "A is an item detail of B" | HasItemDetail = "Has Item Detail" "A has item detail B";
    OrderedProductOf = "Ordered Product Of" "A is the ordered product of B" | ProductOrdered = "Product Ordered" "A is a product order of B";
    IsCategorizedAs = "Is Categorized As" "A is categorized as B"  | CategoryOf = "A is a category of B";
    StockedAt = "Stocked At" "A is stocked at B" | Stocks = "Stocks" "A is the location of stock B";
}


status codes {
    Available = "Available"  "Job is Available for processing";
    Active = "Active" "Working on it now";
    WaitingOnCreditCheck = "Waiting on Credit Check" "Waiting on credit check to be Completed";
    Completed = "Completed" "Completed job";
    Failure = "Failure" "Something went pear shaped";
    PickCompleted = "Pick Completed" "Pick product has been Completed";
    WaitingOnPurchaseOrder = "Waiting on the purchace order" "Waiting for the purchase order to be complete";
    WaitingOnPricing = "Waiting on pricing" "Waiting for pricing to be Completed";
    WaitingOnFee = "Waiting on Fee calculation" "Waiting for Fee calculation to be Completed";
    Abandoned = "Job abandoned"  "We were going to do it, something happened in earlier processing that will prevent US from proceeding";
}
status code sequencings {
    Pick: {
           WaitingOnCreditCheck Available
           Available Active 
           Active Completed
    }
    Ship: {
        WaitingOnPurchaseOrder Available 
        Available Active 
        Active Completed
    }
    Deliver: {
        Available Active
        Active Completed
    }
    CheckCredit: {
        Available Active
        Active Completed
    }
    CheckLetterOfCredit: {
        Available Active
        Active Completed
    }
    Discount: {
        Available Active
        Active Completed
    }
    Fee: {
        Available Active
        Active Completed
    }
    PrintCustomsDeclaration: {
        WaitingOnFee Available
        Available Active
        Active Completed
    }
    PrintPurchaseOrder: {
        WaitingOnFee Available
        Available Active
        Active Completed
    }
    SalesTax: {
        Available Active
        Active Completed
    }
}

sequencing auths {
    parent {
        
        service: CheckCredit
        status: Completed
        parent: Pick
        next: Available
        
        service: CheckLetterOfCredit
        status: Completed
        parent: Pick
        next: Available
        
        service: PrintCustomsDeclaration
        status: Completed
        parent: Ship
        next: Available
        activeSiblings: false
        
        service: PrintPurchaseOrder
        status: Completed
        parent: Ship
        next: Available
        activeSiblings: false
        
        service: Discount
        status: Completed
        parent: Fee
        next: Available
        activeSiblings: false
        
        service: SalesTax
        status: Completed
        parent: Fee
        next: Available
        activeSiblings: false
        
        service: Ship
        status: Completed
        parent: Deliver
        next: Completed
        activeSiblings: false
        
        service: Fee
        status: Completed
        parent: PrintPurchaseOrder
        next: Available
        activeSiblings: false
    }
    sibling {
        parent: Pick
        status: Completed
        sibling: Ship
        next: WaitingOnPurchaseOrder
        
        parent: PrintPurchaseOrder
        status: Completed
        sibling: PrintCustomsDeclaration
        next: Available
    }
    child {
        parent: Ship
        status: WaitingOnPurchaseOrder
        child: PrintPurchaseOrder
        next: WaitingOnFee
        
        parent: Pick
        status: WaitingOnCreditCheck
        child: CheckCredit
        next: Available
        
        parent: PrintPurchaseOrder
        status: WaitingOnFee
        child: Fee
        next: Available
        
        parent: Deliver
        status: Available
        child: Pick
        next: WaitingOnCreditCheck
        
        parent: Fee
        status: Available
        child: SalesTax
        next: Available
        
        parent: Fee
        status: Available
        child: Discount
        next: Available
    }
}
inferences {
    AreaOf.RegionOf.AreaOf
    AreaOf.StateOf.AreaOf
    AreaOf.CityOf.AreaOf
    AreaOf.StreetOf.AreaOf
    RegionOf.StateOf.RegionOf
    RegionOf.CityOf.RegionOf
    RegionOf.StreetOf.RegionOf
    StateOf.CityOf.StateOf
    StateOf.StreetOf.StateOf
    CityOf.StreetOf.CityOf
    ReportsTo.ReportsTo.ReportsTo
}
meta protocols {
        transform: Deliver
        product: kernel::AnyRelationship
        from: InArea
        to: InState
        
        transform: Pick
        product: kernel::AnyRelationship
        from: InArea
        to: InArea 
        requester: CustomerType
        
        transform: Ship
        product: kernel::AnyRelationship
        from: InArea
        to: InArea 
        requester: CustomerType
        
        transform: Fee
        product: kernel::AnyRelationship
        to: InCity
        requester: SalesTaxStatus 
        
        transform: PrintPurchaseOrder
        product: kernel::AnyRelationship
        from: InArea
        to: kernel::AnyRelationship
        requester: kernel::AnyRelationship
}